package com.greenfoxacademy.vocseikatimasterwork.models.dtos.coursedtos;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.greenfoxacademy.vocseikatimasterwork.models.CourseType;
import com.greenfoxacademy.vocseikatimasterwork.models.Status;
import com.greenfoxacademy.vocseikatimasterwork.models.entities.Course;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;
import java.time.LocalDateTime;
import lombok.AllArgsConstructor;
import lombok.Data;

@AllArgsConstructor
@Data
@ApiModel(description = "Details of a course.")
public class CourseDto {

  @ApiModelProperty(value = "Unique ID of the course, autogenerated by the database.")
  private Long id;

  @ApiModelProperty(value = "Title of the course.")
  private String title;

  @ApiModelProperty(value = "Start date of the course.")
  private LocalDate startDate;

  @ApiModelProperty(value = "End date of the course.")
  private LocalDate endDate;

  @ApiModelProperty(value = "The length of the course in hours.")
  private Integer durationInHours;

  @ApiModelProperty(value = "Setup the order of the course, individual or group.")
  private Boolean individualEducation;

  @ApiModelProperty(value = "Price of the course.")
  private Double price;

  @ApiModelProperty(value = "Type of the course.")
  private CourseType type;

  @ApiModelProperty(value = "Status of the course.")
  private Status status;

  @ApiModelProperty(value = "Unique identifier of the instructor who is leading the course.")
  private Long instructorId;

  @ApiModelProperty(value = "Unique identifier of the room where is being leading the course.")
  private Long classRoomId;

  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd HH:mm")
  private LocalDateTime createdAt;
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd HH:mm")
  private LocalDateTime lastUpdatedAt;

  public static CourseDto convertToCourseDto(Course course) {
    return new CourseDto(course.getId(), course.getTitle(), course.getStartDate(),
        course.getEndDate(), course.getDurationInHours(), course.getIndividualEducation(),
        course.getPrice(), course.getType(), course.getStatus(), getInstructorId(course),
        course.getClassRoom().getId(), course.getCreatedAt(), course.getLastUpdatedAt());
  }

  private static Long getInstructorId(Course course) {
    if (course.getInstructor() == null) {
      return null;
    }
    return course.getInstructor().getId();
  }
}
